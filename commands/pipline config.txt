pipeline {
    agent any
    tools{
        jdk 'jdk-17'
        maven 'maven3'
    }
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
        DB_CONTAINER_IMAGE = 'mysql:latest'
        DB_CONTAINER_NAME = 'mysql-test'
        DB_USER = 'root'
        DB_PASSWORD = 'root'
        DB_NAME = 'timesheet_devops_db'
    }
    stages {
        stage('Git Checkout') {
            steps {
                echo 'Pulling ...';
                sh '''
                    git config --global credential.helper store
                    git config --global user.name "walidhsn"
                    git config --global user.email "walid.benhassouna@gmail.com"
                    '''
                git credentialsId: 'git-cred', url: 'https://github.com/walidhsn/timesheet-devops.git'
            }
        }
         stage('Clean') {
            steps {
                sh "mvn clean"
            }
        }
         stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
         stage('Test') {
            steps {
                script {
                    // Run MySQL container with a random port
                    docker.image(env.DB_CONTAINER_IMAGE)
                          .withRun("-e MYSQL_ROOT_PASSWORD=${env.DB_PASSWORD} -e MYSQL_DATABASE=${env.DB_NAME} -P") { c ->

                        // Get the random port mapped to the container's MySQL port (3306)
                        def port = sh(returnStdout: true, script: "docker inspect --format='{{(index (index .NetworkSettings.Ports \"3306/tcp\") 0).HostPort}}' ${c.id}").trim()

                        // Wait until MySQL is ready using docker exec
                        sh "while ! docker exec ${c.id} mysqladmin ping -h127.0.0.1 -P3306 --silent; do sleep 1; done"
                        
                        // Run tests with the database container
                        sh "SPRING_DATASOURCE_URL=jdbc:mysql://localhost:${port}/${env.DB_NAME} mvn test"
                    }
                }
            }
        }
         stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
         stage('SonarQube Analysis') {
            steps {
                 withSonarQubeEnv('sonar') {
                    sh ''' 
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=timesheet \
                        -Dsonar.projectKey=timesheet \
                        -Dsonar.java.binaries=. \
                        -Dsonar.exclusions=trivy-fs-report.html,trivy-image-report.html
                    '''
                }
            }
        }
         stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred' 
                }
            }
        }
                stage('Clean Workspace') {
            steps {
                sh "mvn clean"
            }
        }
         stage('Prepare Release') {
            steps {
                sh "mvn release:prepare -DautoVersionSubmodules=true -Darguments='-Dmaven.test.skip=true'"
            }
        }
        stage('Perform Release') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk-17', maven: 'maven3', traceability: true) {
                    sh "mvn release:perform -Darguments='-Dmaven.test.skip=true'"
                }
            }
        }
        stage('Build & Tag Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker build -t walidhsn/timesheet:latest ."
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                // Download the Java DB for Trivy
                sh "trivy image --download-java-db-only"
                // Run the Trivy scan on the Docker image
                sh "trivy image --format table -o trivy-image-report.html walidhsn/timesheet:latest"
            }
        }
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker push walidhsn/timesheet:latest"
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying to Kubernetes..."
            // Add deployment steps here
            }
        }
    }
}
