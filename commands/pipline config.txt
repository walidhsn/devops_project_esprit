pipeline {
    agent any
    tools{
        jdk 'jdk-17'
        maven 'maven3'
    }
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
        DB_CONTAINER_IMAGE = 'mysql:latest'
        DB_CONTAINER_NAME = 'mysql-test'
        DB_USER = 'root'
        DB_PASSWORD = 'root'
        DB_NAME = 'foyer_db'
        DOCKER_REPO = 'walidhsn/benhassouna_walid_tpfoyer'
    }
    stages {
        stage('Git Checkout') {
            steps {
                echo 'Pulling ...';
                sh '''
                    git config --global credential.helper store
                    git config --global user.name "walidhsn"
                    git config --global user.email "walid.benhassouna@gmail.com"
                    '''
                git credentialsId: 'git-cred', url: 'https://github.com/walidhsn/tp_foyer.git'
            }
        }
         stage('Clean') {
            steps {
                sh "mvn clean"
            }
        }
         stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
         stage('Test') {
            steps {
                script {
                    // Run MySQL container with a random port
                    docker.image(env.DB_CONTAINER_IMAGE)
                          .withRun("-e MYSQL_ROOT_PASSWORD=${env.DB_PASSWORD} -e MYSQL_DATABASE=${env.DB_NAME} -P") { c ->

                        // Get the random port mapped to the container's MySQL port (3306)
                        def port = sh(returnStdout: true, script: "docker inspect --format='{{(index (index .NetworkSettings.Ports \"3306/tcp\") 0).HostPort}}' ${c.id}").trim()

                        // Wait until MySQL is ready using docker exec
                        sh "while ! docker exec ${c.id} mysqladmin ping -h127.0.0.1 -P3306 --silent; do sleep 1; done"
                        
                        // Run tests with the database container
                        sh "SPRING_DATASOURCE_URL=jdbc:mysql://localhost:${port}/${env.DB_NAME} mvn clean install"
                    }
                }
                junit '**/target/surefire-reports/TEST-*.xml'
            }
        }
         stage('File System Scan') {
            steps {
                sh "trivy fs --db-repository public.ecr.aws/aquasecurity/trivy-db:2 --format table -o trivy-fs-report.html ."
            }
        }
         stage('SonarQube Analysis') {
            steps {
                 withSonarQubeEnv('sonar') {
                    sh ''' 
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=tpfoyer \
                        -Dsonar.projectKey=tpfoyer \
                        -Dsonar.java.binaries=. \
                        -Dsonar.exclusions=trivy-fs-report.html,trivy-image-report.html,test/java/**
                    '''
                }
            }
        }
         stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred' 
                }
            }
        }
        stage('Get Version from POM') {
            steps {
                script {
                    // Extract version from pom.xml
                    def version = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                    // Remove "-SNAPSHOT" to get the release version
                    env.DOCKER_IMAGE_VERSION = version.replace('-SNAPSHOT', '')
                    echo "Docker image version set to: ${env.DOCKER_IMAGE_VERSION}"
                }
            }
        }
        stage('Clean Workspace') {
            steps {
                sh "mvn clean"
            }
        }
         stage('Prepare Release') {
            steps {
                sh "mvn release:prepare -DautoVersionSubmodules=true -Darguments='-Dmaven.test.skip=true'"
            }
        }
        stage('Perform Release') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk-17', maven: 'maven3', traceability: true) {
                    sh "mvn release:perform -Darguments='-Dmaven.test.skip=true'"
                }
            }
        }
        stage('Build & Tag Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker build -t ${env.DOCKER_REPO}:${env.DOCKER_IMAGE_VERSION} ."
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                // Run the Trivy scan on the Docker image
                sh "trivy image --java-db-repository public.ecr.aws/aquasecurity/trivy-java-db:1 --format table -o trivy-image-report.html ${env.DOCKER_REPO}:${env.DOCKER_IMAGE_VERSION}"
            }
        }
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker push ${env.DOCKER_REPO}:${env.DOCKER_IMAGE_VERSION}"
                }
            }
        }
        stage('Update Deployment YAML') {
            steps {
                script {
                def currentImageTag = "${env.DOCKER_REPO}:${env.DOCKER_IMAGE_VERSION}"
                def deploymentFile = 'backend-deployment.yaml'
                
                // Check if there is an image line, and capture the image tag
                def existingImage = sh(script: "awk '/image:/ {print \$2}' ${deploymentFile}", returnStdout: true).trim()
                
                // Update the image version or tag
                sh "sed -i 's|${existingImage}|${currentImageTag}|g' ${deploymentFile}"
                
                // commit the changes
                sh "git add ${deploymentFile}"
                sh "git commit -m 'Update Backend deployment image version to ${env.DOCKER_IMAGE_VERSION}'"
                sh "git push origin HEAD"
                }
            }
        }
    stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.0.80:6443') {
                    script {
                        def serviceName = "backend-service"
                        def namespace = "webapps"
                        def mysqlDeploymentName = "mysql-deployment"
                        def mysqlServiceName = "mysqldb"
                        def mysqlPodReady = false
                        def deploymentFile = "backend-deployment.yaml"
                        // Check if the MySQL deployment exists
                        def mysqlDeployment = sh(script: "kubectl get deployments -n ${namespace} | grep ${mysqlDeploymentName} || true", returnStdout: true).trim()
        
                        // If MySQL deployment doesn't exist, create it
                        if (mysqlDeployment.isEmpty()) {
                            echo "Deploying MySQL server..."
                            sh "kubectl apply -f mysql.yaml"
                             // Wait for MySQL pod to be ready
                            echo "Waiting for MySQL pod to be ready..."
                            timeout(time: 2, unit: 'MINUTES') { // Set a timeout for waiting
                                waitUntil {
                                    // Check if the MySQL pod is ready
                                    mysqlPodReady = sh(script: "kubectl get pods -n ${namespace} -l app=mysql -o jsonpath='{.items[0].status.containerStatuses[0].ready}'", returnStdout: true).trim() == "true"
                                    return mysqlPodReady
                                }
                            }
                        } else {
                            echo "MySQL deployment already exists. Skipping MySQL deployment."
                        }
        
                        // Now that MySQL is ready, continue to update the backend deployment
                        echo "MySQL is ready. Updating backend deployment..."
                        sh "kubectl apply -f ${deploymentFile}"
                        
                        // Check if the service exists
                        def serviceExists = sh(script: "kubectl get service ${serviceName} -n ${namespace} --no-headers | wc -l", returnStdout: true).trim()
                        // Check if the backend service exists
                        if (serviceExists == "0") {
                            // Service does not exist, create it
                            sh "kubectl apply -f backend-service.yaml"
                        } else {
                            echo "Service ${serviceName} already exists in namespace ${namespace}."
                        }
                    }
                }
            }
        }
         stage('Verify The Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.0.80:6443') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"
                }
            }
             
         }
    }
}
